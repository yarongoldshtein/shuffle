/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package shuffle;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;

/**
 *
 * @author yaron
 */
public class shuffle extends javax.swing.JFrame {

    Dimension d = new Dimension(); // the window appears in the middle of the screen
    Toolkit t = Toolkit.getDefaultToolkit(); // the window appears in the middle of the screen
    int x, y; // the window appears in the middle of the screen

    /**
     * Creates new form gui
     */
    public shuffle() {
        super("shuffle");
        initComponents();
        x = t.getScreenSize().width;
        y = t.getScreenSize().height;
        this.setLocation(x / 2 - (this.getSize().width), y / 2 - (this.getSize().height));
        UndoB.setBackground(Color.red);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        shuffleB = new javax.swing.JButton();
        PathTA = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        shuffleCB = new javax.swing.JComboBox<>();
        UndoB = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("shuffle");

        shuffleB.setText("shuffle");
        shuffleB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shuffleBActionPerformed(evt);
            }
        });

        jLabel1.setText("path");

        jLabel2.setText("shuffle?");

        shuffleCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "yes", "no" }));

        UndoB.setText("Undo");
        UndoB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UndoBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(PathTA, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(35, 35, 35)
                        .addComponent(shuffleCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(53, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(176, 176, 176)
                .addComponent(shuffleB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(UndoB)
                .addGap(34, 34, 34))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PathTA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(shuffleCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(shuffleB)
                        .addGap(44, 44, 44))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(UndoB)
                        .addGap(21, 21, 21))))
        );

        getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void shuffleBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shuffleBActionPerformed
        if (PathTA.getText().equals("")) {
            PathTA.setBackground(Color.red);
        } else {
            File folder = new File(PathTA.getText());
            File[] listOfFiles = folder.listFiles();
            int[] numbers = new int[listOfFiles.length];
            for (int i = 0; i < listOfFiles.length; i++) {
                if (listOfFiles[i].isFile()) {
                    if (shuffleCB.getSelectedIndex() == 0) {
                        double r = Math.random() * listOfFiles.length;
                        int rnd = (int) r;
                        while ((rnd < numbers.length) && (numbers[rnd] == 1)) {
                            rnd++;
                        }
                        if (rnd == numbers.length) {
                            rnd--;
                            while ((rnd >= 0) && (numbers[rnd] == 1)) {
                                rnd--;
                            }
                        }
                        String newPath = listOfFiles[i].getAbsolutePath();
                        String[] arr = newPath.split("\\\\");
                        arr[arr.length - 1] = (rnd + 1)+"-" + arr[arr.length - 1];
                        newPath = "";
                        for (int j = 0; j < arr.length - 1; j++) {
                            newPath += arr[j] + "\\";
                        }
                        newPath += arr[arr.length - 1];
                        File NewName = new File(newPath);
                        listOfFiles[i].renameTo(NewName);
                        numbers[rnd] = 1;
                    } else {
                        String newPath = listOfFiles[i].getAbsolutePath();
                        String[] arr = newPath.split("\\\\");
                        arr[arr.length - 1] = (i + 1)+"-" + arr[arr.length - 1];
                        newPath = "";
                        for (int j = 0; j < arr.length - 1; j++) {
                            newPath += arr[j] + "\\";
                        }
                        newPath += arr[arr.length - 1];
                        File NewName = new File(newPath);
                        listOfFiles[i].renameTo(NewName);
                    }
                    PathTA.setBackground(Color.GREEN);
                } else if (listOfFiles[i].isDirectory()) {
                    System.out.println("Directory " + listOfFiles[i].getName());
                }
            }
        }
    }//GEN-LAST:event_shuffleBActionPerformed

    private void UndoBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UndoBActionPerformed
        if (PathTA.getText().equals("")) {
            PathTA.setBackground(Color.red);
        } else {
            File folder = new File(PathTA.getText());
            File[] listOfFiles = folder.listFiles();
            for (int i = 0; i < listOfFiles.length; i++) {
                if (listOfFiles[i].isFile()) {
                    String newPath = listOfFiles[i].getAbsolutePath();
                    String[] arr = newPath.split("\\\\");
                    String[] temp =  arr[arr.length - 1].split("-");
                    arr[arr.length - 1] = "";
                    for (int j = 1; j < temp.length-1; j++) {
                        arr[arr.length - 1] += temp[j]+"-";
                    }
                    arr[arr.length - 1] += temp[temp.length-1];
                    newPath = "";
                    for (int j = 0; j < arr.length - 1; j++) {
                        newPath += arr[j] + "\\";
                    }
                    newPath += arr[arr.length - 1];
                    File NewName = new File(newPath);
                    listOfFiles[i].renameTo(NewName);
                    PathTA.setBackground(Color.blue);
                }
            }
        }
    }//GEN-LAST:event_UndoBActionPerformed

    /**
     * @param args the command line arguments
     */
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(shuffle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(shuffle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(shuffle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(shuffle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new shuffle().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField PathTA;
    private javax.swing.JButton UndoB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton shuffleB;
    private javax.swing.JComboBox<String> shuffleCB;
    // End of variables declaration//GEN-END:variables
}
